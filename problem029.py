import problem
import math
import utility

class Problem(problem.Problem):
	def __init__(self):
		number = 29
		question = 'How many distinct terms are in the sequence generated by a^b for 2 <= a <= 100 and 2 <= b <= 100?'
		problem.Problem.__init__(self, number, question)

	def getAnswer(self):
		
		primes = utility.getPrimes(100)
		
		def isPowerOf(n):
			for i in xrange(2, n):
				t = 1
				j = 0
				while t < n:
					t *= i
					j += 1
				if t == n:
					assert j != 1
					return [i, j]
			return [n, 1]
			
		def f(arange, brange):
			sets = [set() for a in arange]
			ret = 0
			
			# it only happens when a is power of some number
			for i, a in enumerate(arange):
				f = isPowerOf(a)
				if f[1] == 1:
					for b in brange:
						sets[i].add(b)
				else:
					for b in brange:
						sets[arange.index(f[0])].add(b * f[1])
					
			for s in sets:
				ret += len(s)
			return ret
			
		assert f(range(2, 6), range(2, 6)) == 15
		return f(range(2, 101), range(2, 101))